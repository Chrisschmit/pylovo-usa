import pandas as pd
from sample import get_samples_with_regiostar, perc_of_pop_per_class

from src.grid_generator import GridGenerator


def replace_regional_identifier(regional_identifier, regiostar_set):
    """
    this function replaces a regional_identifier in a sample set with another regional_identifier from the same population density bin
    and same regiostar class
    this function is to be used if regional_identifier from sample set has any irregularities or is not generated by the
    grid_generator
    input: regional_identifier that is to be replaced
    dataframe sample set where regional_identifier is to be replaced
    returns regional_identifier that replaces old one and a sample set as dataframe where the given regional_identifier is replaced
    """
    # get row from dataframe (sample set) that is to be replaced
    row_to_be_replaced = regiostar_set[regiostar_set['regional_identifier']
                                       == regional_identifier]
    if row_to_be_replaced.empty:
        raise Exception('regional_identifier is not in Regiostar sample set')

    # get its attributes
    bin_no = row_to_be_replaced.iloc[0]['bin_no']
    regio = row_to_be_replaced.iloc[0]['regio7']
    index = row_to_be_replaced.index

    # get rows with same attributes that should not be inserted again
    rows_with_same_attributes = regiostar_set[regiostar_set['regio7'] == regio]
    rows_with_same_attributes = rows_with_same_attributes[
        rows_with_same_attributes['bin_no'] == bin_no]

    # create a new sample set from which replacement regional_identifier can
    # be taken
    gg = GridGenerator(regional_identifier='85375')
    dbc_client = gg.dbc
    regiostar_regional_identifier = dbc_client.get_municipal_register()

    regiostar_regional_identifier = regiostar_regional_identifier[
        regiostar_regional_identifier['fed_state'] == 9]
    samples_bayern = perc_of_pop_per_class(regiostar_regional_identifier)
    regiostar_samples_result = get_samples_with_regiostar(
        samples_bayern, regiostar_regional_identifier)
    regiostar_samples_result = regiostar_samples_result.reset_index()

    # the regional_identifier for the replacement need to have the same bin_no
    # and regio class
    rows_to_replace_from = regiostar_samples_result[regiostar_samples_result['regio7'] == regio]
    rows_to_replace_from = rows_to_replace_from[rows_to_replace_from['bin_no'] == bin_no]

    # the regional_identifier should not already exist in sample set
    rows_to_replace_from[rows_to_replace_from['regional_identifier']
                         != rows_with_same_attributes]

    if rows_to_replace_from.empty:
        # raise Exception('No regional_identifier that can replace given regional_identifier was found. Try again.')
        # this function call could theoretically cause a indefinite loop
        # in reality each regional_identifier should be replaceable
        df_new_regional_identifier, regiostar_set = replace_regional_identifier(
            regional_identifier, regiostar_set)
        return df_new_regional_identifier, regiostar_set

    # select first row to replace
    regiostar_set.iloc[index] = rows_to_replace_from.iloc[0]

    print(row_to_be_replaced['regional_identifier'])
    print('was replaced by')
    print(rows_to_replace_from.iloc[0]['regional_identifier'])

    df_new_regional_identifier = rows_to_replace_from.iloc[0].to_frame().T
    return df_new_regional_identifier, regiostar_set


def replace_multiple_regional_identifier(
        df_regional_identifier, regiostar_set):
    """
    replaces all regional_identifier from regiostar set that are listed in the column 'regional_identifier' of df_regional_identifier
    returns new regiostar set and dataframe with only new regional_identifier
    """
    df_new_regional_identifier = pd.DataFrame()
    for i in df_regional_identifier['regional_identifier']:
        print(i)
        new_regional_identifier, regiostar_set = replace_regional_identifier(
            i, regiostar_set)
        df_new_regional_identifier = pd.concat(
            [df_new_regional_identifier, new_regional_identifier])
    return df_new_regional_identifier, regiostar_set


# replace multiple regional_identifier
# regiostar_set = pd.read_csv('regiostar_samples_bayern_17052023.csv', index_col=0)
# df_regional_identifier = pd.read_excel('regional_identifier_to_replace.xlsx', index_col=0)
# df_new_regional_identifier, regiostar_set_new = replace_multiple_regional_identifier(df_regional_identifier, regiostar_set)
# df_new_regional_identifier.to_csv("regional_identifier_as_replacement_05062023.csv")
# regiostar_set_new.to_csv("regiostar_samples_bayern_replaced.csv")

# example for single replacement
regiostar_set = pd.read_csv(
    '../figures_thesis/regiostar_samples_bayern_replaced_06062023_4.csv',
    index_col=0)
regional_identifier = 63877
df_new_regional_identifier, regiostar_set_new = replace_regional_identifier(
    regional_identifier, regiostar_set)
regiostar_set_new.to_csv("regiostar_samples_bayern_replaced_06062023_5.csv")
df_new_regional_identifier.to_csv(
    "regional_identifier_as_replacement_06062023_5.csv")

import pandas as pd

from sample import get_samples_with_regiostar
from sample import perc_of_pop_per_class
from src.grid_generator import GridGenerator


def replace_plz(plz, regiostar_set):
    """
    this function replaces a plz in a sample set with another plz from the same population density bin
    and same regiostar class
    this function is to be used if plz from sample set has any irregularities or is not generated by the
    grid_generator
    input: plz that is to be replaced
    dataframe sample set where plz is to be replaced
    returns plz that replaces old one and a sample set as dataframe where the given plz is replaced
    """
    # get row from dataframe (sample set) that is to be replaced
    row_to_be_replaced = regiostar_set[regiostar_set['plz'] == plz]
    if row_to_be_replaced.empty:
        raise Exception('PLZ is not in Regiostar sample set')

    # get its attributes
    bin_no = row_to_be_replaced.iloc[0]['bin_no']
    regio = row_to_be_replaced.iloc[0]['regio7']
    index = row_to_be_replaced.index

    # get rows with same attributes that should not be inserted again
    rows_with_same_attributes = regiostar_set[regiostar_set['regio7'] == regio]
    rows_with_same_attributes = rows_with_same_attributes[rows_with_same_attributes['bin_no'] == bin_no]

    # create a new sample set from which replacement plz can be taken
    gg = GridGenerator(plz='85375')
    dbc_client = gg.dbc
    regiostar_plz = dbc_client.get_municipal_register()

    regiostar_plz = regiostar_plz[regiostar_plz['fed_state'] == 9]
    samples_bayern = perc_of_pop_per_class(regiostar_plz)
    regiostar_samples_result = get_samples_with_regiostar(samples_bayern, regiostar_plz)
    regiostar_samples_result = regiostar_samples_result.reset_index()

    # the plz for the replacement need to have the same bin_no and regio class
    rows_to_replace_from = regiostar_samples_result[regiostar_samples_result['regio7'] == regio]
    rows_to_replace_from = rows_to_replace_from[rows_to_replace_from['bin_no'] == bin_no]

    # the plz should not already exist in sample set
    rows_to_replace_from[rows_to_replace_from['plz'] != rows_with_same_attributes]

    if rows_to_replace_from.empty:
        # raise Exception('No PlZ that can replace given PLZ was found. Try again.')
        # this function call could theoretically cause a indefinite loop
        # in reality each plz should be replaceable
        df_new_plz, regiostar_set = replace_plz(plz, regiostar_set)
        return df_new_plz, regiostar_set

    # select first row to replace
    regiostar_set.iloc[index] = rows_to_replace_from.iloc[0]

    print(row_to_be_replaced['plz'])
    print('was replaced by')
    print(rows_to_replace_from.iloc[0]['plz'])

    df_new_plz = rows_to_replace_from.iloc[0].to_frame().T
    return df_new_plz, regiostar_set


def replace_multiple_plz(df_plz, regiostar_set):
    """
    replaces all plz from regiostar set that are listed in the column 'plz' of df_plz
    returns new regiostar set and dataframe with only new plz
    """
    df_new_plz = pd.DataFrame()
    for i in df_plz['plz']:
        print(i)
        new_plz, regiostar_set = replace_plz(i, regiostar_set)
        df_new_plz = pd.concat([df_new_plz, new_plz])
    return df_new_plz, regiostar_set


# replace multiple plz
# regiostar_set = pd.read_csv('regiostar_samples_bayern_17052023.csv', index_col=0)
# df_plz = pd.read_excel('plz_to_replace.xlsx', index_col=0)
# df_new_plz, regiostar_set_new = replace_multiple_plz(df_plz, regiostar_set)
# df_new_plz.to_csv("plz_as_replacement_05062023.csv")
# regiostar_set_new.to_csv("regiostar_samples_bayern_replaced.csv")

# example for single replacement
regiostar_set = pd.read_csv('../figures_thesis/regiostar_samples_bayern_replaced_06062023_4.csv', index_col=0)
plz = 63877
df_new_plz, regiostar_set_new = replace_plz(plz, regiostar_set)
regiostar_set_new.to_csv("regiostar_samples_bayern_replaced_06062023_5.csv")
df_new_plz.to_csv("plz_as_replacement_06062023_5.csv")
